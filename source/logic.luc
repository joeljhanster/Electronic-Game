// FSM LOGIC MODULE: This file controls the signals for regFile (write & default_values) and ALU (alufn).
// Includes entire FSM logic behind the electronic game.

module logic (
    input clk,              // clock
    input rst,              // reset
    input start_button,     // start button to play game
    input push_button[16],  // 16-bit push buttons for input sequence by user
    input alu[16],          // alu input after CMPEQ, ADD, MULTIPLY, "A" etc.
    output led[8],          // led output on FPGA for testing purposes -- to show number of inputs left
    output light[16],       // 16-bit light connected to the push buttons, for sequence light up and user input
    output alufn[6],        // alufn signal for ALU Module
    output ra_addr[5],      // register A address
    output rb_addr[5],      // register B address
    output wa_data[16],     // write data into register A
    output write,           // write signal: write = 1; read = 0
    output default_values   // default values signal to clear data in register files
  ) {
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE, CHECKREGISTERDATA, MULTIPLIER, POINTSTOADD, DELAY, LIGHT, S12, S11, S10, S9, S8, S7, S6, S5, S4, S3, S2, S1, S0, FAIL, SUCCESS};
      delayCount delay;      // controls speed of DELAY sequence
      easyCount easy;        // controls speed of EASY mode light up sequence
      medCount med;          // controls speed of MEDIUM mode light up sequence
      hardCount hard;        // controls speed of HARD mode light up sequence
      extremeCount extreme;  // controls speed of EXTREME mode light up sequence
      bossCount boss;        // controls speed of BOSS mode light up sequence
      score scoreModule;     // add score module to update scores in regFile
      dff stage[4];          // 16 stages in total, thus 4-bits
      dff length[4];         // sequence length (max 13, thus 4-bits)
      dff count[4];          // counter to select ra_addr when writing into regFile during light up sequence (stores data into registers backwards)
      dff release[100];      // average time taken for each button pressed before releasing is 7000000-10000000 clock cycles, number of cycles doesn't exceed 100 bits (arbitrarily large)
      dff press_input[16];   // stores press input sequence as data for register 14
      dff cmpeq;             // stores alu output after CMPEQ when checking press input sequence and light up sequence
      dff multiplier[16];    // stores multiplier values for each stage as data for register 18
      dff countPoints;       // signal to store number of points to add into register 19 after MULTIPLY
    }
  }
  
  sig checkReg[5];           // variable to check data of a particular register

  always {
    // DEFAULT OUTPUT VALUES
    led = 8b0;               // turn off led
    light = 16b0;            // turn off light
    alufn = 6b0;             // ADD
    ra_addr = 5b11111;       // register 31
    rb_addr = 5b11111;       // register 31
    wa_data = 16b0;          // data value is zero
    write = 0;               // read file
    default_values = 0;      // default values signal OFF
    scoreModule.alu = alu;   // connect alu input of score module
    delay.resetCount = 0;    // reset DELAY counter OFF
    easy.resetCount = 0;     // reset EASY counter OFF
    med.resetCount = 0;      // reset MEDIUM counter OFF
    hard.resetCount = 0;     // reset HARD counter OFF
    extreme.resetCount = 0;  // reset EXTREME counter OFF
    boss.resetCount = 0;     // reset BOSS counter OFF
    
    // CHANGE REGISTER ADDRESS TO CHECK
    checkReg = 5b00000;
    
    // DEFINING SEQUENCE LENGTH AND SPEED MULTIPLIER BASED ON STAGE
    case (stage.q) {
      0: length.d = 3;
         multiplier.d = 1;
      1: length.d = 3;
         multiplier.d = 1;
      2: length.d = 4;
         multiplier.d = 1;
      3: length.d = 5;
         multiplier.d = 1;
      4: length.d = 5;
         multiplier.d = 1;
      5: length.d = 5;
         multiplier.d = 2;
      6: length.d = 6;
         multiplier.d = 2;
      7: length.d = 6;
         multiplier.d = 2;
      8: length.d = 7;
         multiplier.d = 2;
      9: length.d = 8;
         multiplier.d = 3;
      10: length.d = 9;
          multiplier.d = 3;
      11: length.d = 9;
          multiplier.d = 3;
      12: length.d = 10;
          multiplier.d = 3;
      13: length.d = 11;
          multiplier.d = 4;
      14: length.d = 12;
          multiplier.d = 4;
      15: length.d = 13;
          multiplier.d = 5;
    }
    
    case (state.q) {
      state.IDLE:
        default_values = 1;  // reset data stored in registers
        
        // STORE DEFAULT 3 POINTS INTO REGISTER 17
        ra_addr = 5b10001;   // register 17
        wa_data = 3;         // default 3 points
        write = 1;           // write file
        
        // INITIALIZE COUNT AND STAGE TO ZERO
        count.d = 0;
        stage.d = 0;
        
        // PRESS START BUTTON TO PLAY
        if (start_button) {
          state.d = state.MULTIPLIER;
        }
        // CHEAT: MEDIUM MODE
        if (push_button[0] && push_button[12]) {
          stage.d = 5;
          state.d = state.MULTIPLIER;
        }
        // CHEAT: HARD MODE
        if (push_button[0] && push_button[13]) {
          stage.d = 9;
          state.d = state.MULTIPLIER;
        }
        // CHEAT: EXTREME MODE
        if (push_button[0] && push_button[14]) {
          stage.d = 13;
          state.d = state.MULTIPLIER;
        }
        // CHEAT: BOSS MODE
        if (push_button[0] && push_button[15]) {
          stage.d = 15;
          state.d = state.MULTIPLIER;
        }
        // CHECK REGISTER FOR DATA
        if (push_button[14]) {
          state.d = state.CHECKREGISTERDATA;
        }
        
      // FOR TESTING: CHECKING REGISTER "A" DATA BY CHANGING REGISTER "A" ADDRESS
      state.CHECKREGISTERDATA:
        write = 0;               // read data
        alufn = 6b011010;        // "A"
        ra_addr = checkReg;      // register address to check
        rb_addr = 5b11111;       // doesn't matter
        wa_data = 16b0;          // doesn't matter
        light = alu;             // use light to verify 16-bit data
        if (push_button[13]) {
          state.d = state.IDLE;
        }
        
      // INITIALIZE MULTIPLIER (REGISTER 18)
      state.MULTIPLIER:
        write = 1;               // write data
        alufn = 6b000000;        // doesn't matter
        ra_addr = 5b10010;       // register 18 (multiplier)
        rb_addr = 5b11111;       // doesn't matter
        wa_data = multiplier.q;  // multiplier according to stage
        state.d = state.POINTSTOADD;
        
      // INITIALIZE POINTS TO ADD (REGISTER 19)
      state.POINTSTOADD:
        // STEP 2: STORE NUMBER OF POINTS TO ADD INTO REGISTER 19
        if (countPoints.q) {
          countPoints.d = 0;      // counter is zero
          wa_data = alu;          // ALU output from multiplying R17 and R18
          write = 1;              // write data
          ra_addr = 5b10011;      // stores numPoints into register 19
          delay.resetCount = 1;   // reset delay to ensure it starts from the initial delay light up
          state.d = state.DELAY;
        }
        // STEP 1: MULTIPLY DEFAULT POINTS WITH SPEED MULTIPLIER
        else {
          write = 0;              // read
          alufn = 6b000010;       // multiply function
          ra_addr = 5b10001;      // register 17
          rb_addr = 5b10010;      // register 18
          countPoints.d = 1;      // jump to step 2
        }
        
      // DELAY LIGHT UP
      state.DELAY:
        light = delay.light;       // delay light up sequence
        if (delay.value == b111) {
          count.d = length.q;      // prepare counter --> subsequently used for storing into register (backwards)
          release.d = 0;           // ensures release is zero before input sequence
          easy.resetCount = 1;     // reset EASY counter to ensure light up sequence properly lights up
          med.resetCount = 1;      // reset MEDIUM counter to ensure light up sequence properly lights up
          hard.resetCount = 1;     // reset HARD counter to ensure light up sequence properly lights up
          extreme.resetCount = 1;  // reset EXTREME counter to ensure light up sequence properly lights up
          boss.resetCount = 1;     // reset BOSS counter to ensure light up sequence properly lights up
          state.d = state.LIGHT;
        }
      
      // SEQUENCE LIGHT UP
      state.LIGHT: 
        // STAGE 0-4: EASY
        if (stage.q <= 4) {
          light = easy.light;
          
          // STORES LIGHT UP SEQUENCE DATA INTO REGISTERS IN BACKWARDS ORDER
          if (easy.light != 16b0 && easy.value == 26b11111111111111111111111111) {
            ra_addr = count.q;          // number of registers to write in depends on length
            wa_data = easy.light;       // write random light up sequence into respective registers
            write = 1;
            count.d = count.q - 1;      // registers written backwards (e.g. R3,R2,R1)
          }
          if (count.q == 0) {           // all registers stored light up sequence
            if (length.q == 3) {        // requires 3 inputs --> state S2,S1,S0
              state.d = state.S2;
            }
            else if (length.q == 4) {   // requires 4 inputs --> state S3,S2,S1,S0
              state.d = state.S3;
            }
            else if (length.q == 5) {   // requires 5 inputs --> state S4,S3,S2,S1,S0
              state.d = state.S4;
            }
          }
        }
        
        // STAGE 5-8: MEDIUM
        else if (stage.q <= 8) {
          light = med.light;
          
          // STORES LIGHT UP SEQUENCE DATA INTO REGISTERS IN BACKWARDS ORDER
          if (med.light != 16b0 && med.value == 25b1111111111111111111111111) {
            ra_addr = count.q;          // number of registers to write in depends on length
            wa_data = med.light;        // write random light up sequence into respective registers
            write = 1;
            count.d = count.q - 1;      // registers written backwards (e.g. R3,R2,R1)
          }
          if (count.q == 0) {           // all registers stored light up sequence
            if (length.q == 5) {        // requires 5 inputs --> state S4,S3,S2,S1,S0
              state.d = state.S4;
            }
            else if (length.q == 6) {   // requires 6 inputs --> state S5,S4,S3,S2,S1,S0
              state.d = state.S5;
            }
            else if (length.q == 7) {   // requires 7 inputs --> state S6,S5,S4,S3,S2,S1,S0
              state.d = state.S6;
            }
          }
        }
               
        // STAGE 9-12: HARD
        else if (stage.q <= 12) {
          light = hard.light;
          
          // STORES LIGHT UP SEQUENCE DATA INTO REGISTERS IN BACKWARDS ORDER
          if (hard.light != 16b0 && hard.value == 24b111111111111111111111111) {
            ra_addr = count.q;          // number of registers to write in depends on length
            wa_data = hard.light;       // write random light up sequence into respective registers
            write = 1;
            count.d = count.q - 1;      // registers written backwards (e.g. R3,R2,R1)
          }
          if (count.q == 0) {           // all registers stored light up sequence
            if (length.q == 8) {        // requires 8 inputs --> state S7,S6,S5,S4,S3,S2,S1,S0
              state.d = state.S7;
            }
            else if (length.q == 9) {   // requires 9 inputs --> state S8,S7,S6,S5,S4,S3,S2,S1,S0
              state.d = state.S8;
            }
            else if (length.q == 10) {  // requires 10 inputs --> state S9,S8,S7,S6,S5,S4,S3,S2,S1,S0
              state.d = state.S9;
            }
          }
        }
        
        // STAGE 13-14: EXTREME
        else if (stage.q <= 14) {
          light = extreme.light;
          
          // STORES LIGHT UP SEQUENCE DATA INTO REGISTERS IN BACKWARDS ORDER
          if (extreme.light != 16b0 && extreme.value == 23b11111111111111111111111) {
            ra_addr = count.q;          // number of registers to write in depends on length
            wa_data = extreme.light;    // write random light up sequence into respective registers
            write = 1;
            count.d = count.q - 1;      // registers written backwards (e.g. R3,R2,R1)
          }
          if (count.q == 0) {           // all registers stored light up sequence
            if (length.q == 11) {       // requires 11 inputs --> state S10,S9,S8,S7,S6,S5,S4,S3,S2,S1,S0
              state.d = state.S10;
            }
            else if (length.q == 12) {  // requires 12 inputs --> state S11,S10,S9,S8,S7,S6,S5,S4,S3,S2,S1,S0
              state.d = state.S11;
            }
          }
        }
        
        // STAGE 15: BOSS
        else if (stage.q == 15) {
          light = boss.light;
          
          // STORES LIGHT UP SEQUENCE DATA INTO REGISTERS IN BACKWARDS ORDER
          if (boss.light != 16b0 && boss.value == 22b1111111111111111111111) {
            ra_addr = count.q;          // number of registers to write in depends on length
            wa_data = boss.light;       // write random light up sequence into respective registers
            write = 1;
            count.d = count.q - 1;      // registers written backwards (e.g. R3,R2,R1)
          }
          if (count.q == 0) {           // all registers stored light up sequence
            if (length.q == 13) {       // requires 13 inputs --> state S12,S11,S10,S9,S8,S7,S6,S5,S4,S3,S2,S1,S0
              state.d = state.S12;
            }
          }
        }
      
      // 13 INPUTS LEFT
      state.S12:
        light = push_button;
        rb_addr = 5b01101;    // register 13
        
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;         // CMPEQ
          ra_addr = 5b01110;        // register 14 (input)
          wa_data = press_input.q;  // store input sequence as data
          write = 1;                // write data
          if (alu[0]) {             // alu[0] output is 1 if equal
            cmpeq.d = 1;            // signal to store cmpeq results
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S11;
            }
          }
          else if (!cmpeq.q) {
            cmpeq.d = 0;
            state.d = state.FAIL;
          }
        }
        
        led[2] = 1;
      
      // 12 INPUTS LEFT
      state.S11:
        light = push_button;
        rb_addr = 5b01100;    // register 12
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S10;
            }
          }
          else if (!cmpeq.q) {
            cmpeq.d = 0;
            state.d = state.FAIL;
          }
        }
        
        led[3] = 1;
          
      // 11 INPUTS LEFT
      state.S10:
        light = push_button;
        rb_addr = 5b01011;    // register 11
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S9;
            }
          }
          else if (!cmpeq.q) {
            cmpeq.d = 0;
            state.d = state.FAIL;
          }
        }
        
        led[4] = 1;
          
      // 10 INPUTS LEFT
      state.S9:
        light = push_button;
        rb_addr = 5b01010;    // register 10
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S8;
            }
          }
          else if (!cmpeq.q) {
            cmpeq.d = 0;
            state.d = state.FAIL;
          }
        }
        
        led[5] = 1;
          
      // 9 INPUTS LEFT
      state.S8:
        light = push_button;
        rb_addr = 5b01001;    // register 9
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S7;
            }
          }
          else if (!cmpeq.q) {
            cmpeq.d = 0;
            state.d = state.FAIL;
          }
        }
        
        led[6] = 1;
          
      // 8 INPUTS LEFT
      state.S7:
        light = push_button;
        rb_addr = 5b01000;    // register 8
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S6;
            }
          }
          else if (!cmpeq.q) {
            cmpeq.d = 0;
            state.d = state.FAIL;
          }
        }
        
        led[7] = 1;
          
      // 7 INPUTS LEFT
      state.S6:
        light = push_button;
        rb_addr = 5b00111;    // register 7
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S5;
            }
          }
          else if (!cmpeq.q) {
            state.d = state.FAIL;
          }
        }
        
        led[1] = 1;
          
      // 6 INPUTS LEFT
      state.S5:
        light = push_button;
        rb_addr = 5b00110;    // register 6
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S4;
            }
          }
          else if (!cmpeq.q) {
            state.d = state.FAIL;
          }
        }
        
        led[2] = 1;
        
      // 5 INPUTS LEFT
      state.S4:
        light = push_button;
        rb_addr = 5b00101;    // register 5
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S3;
            }
          }
          else if (!cmpeq.q) {
            state.d = state.FAIL;
          }
        }
        
        led[3] = 1;
          
      // 4 INPUTS LEFT
      state.S3:
        light = push_button;
        rb_addr = 5b00100;    // register 4
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S2;
            }
          }
          else if (!cmpeq.q) {
            state.d = state.FAIL;
          }
        }
        
        led[4] = 1;
          
      // 3 INPUTS LEFT
      state.S2:
        light = push_button;
        rb_addr = 5b00011;    // register 3
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S1;
            }
          }
          else if (!cmpeq.q) {
            state.d = state.FAIL;
          }
        }
        
        led[5] = 1;
          
      // 2 INPUTS LEFT
      state.S1:
        light = push_button;
        rb_addr = 5b00010;    // register 2
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.S0;
            }
          }
          else if (!cmpeq.q) {
            state.d = state.FAIL;
          }
        }

        led[6] = 1;
          
      // 1 INPUT LEFT
      state.S0:
        light = push_button;
        rb_addr = 5b00010;    // register 2
          
        // ONLY CHANGE STATE AFTER BUTTON IS RELEASED
        if (push_button != 16b0) {
          press_input.d = push_button;
          release.d = release.q + 1;
          alufn = 6b110101;   // CMPEQ
          ra_addr = 5b01110;  // register 14 (input)
          wa_data = press_input.q;
          write = 1;
          if (alu[0]) {
            cmpeq.d = 1;
          }
        }
        else if (push_button == 16b0 && release.q > 7000000) {
          if (!cmpeq.q) {
            state.d = state.FAIL;
          }
          else if (cmpeq.q) {  // INPUT IS CORRECT
            alufn = scoreModule.alufn;
            ra_addr = scoreModule.ra_addr;
            rb_addr = scoreModule.rb_addr;
            wa_data = scoreModule.wa_data;
            write = scoreModule.write;
            if (stage.q == 15 && scoreModule.next) {  
              cmpeq.d = 0;
              release.d = 0;
              state.d = state.SUCCESS;
            }
            else if (scoreModule.next) {
              cmpeq.d = 0;
              release.d = 0;
              delay.resetCount = 1;
              stage.d = stage.q + 1;
              state.d = state.MULTIPLIER;
            }
          }
        }
        
        led[7] = 1;
        
      state.FAIL:
        count.d = 4b0;
        stage.d = 4b0;
          
        if (delay.value < 4) {
          light = 16b1111111110000011;
        }
        
        // PRESS START BUTTON TO PLAY
        if (push_button[15]) {
          state.d = state.IDLE;
        }
          
      state.SUCCESS:
        count.d = 4b0;
        stage.d = 4b0;
          
        if (delay.value < 4) {
          light = 16b1111111111111111;
        }
        
        // PRESS START BUTTON TO PLAY
        if (push_button[15]) {
          state.d = state.IDLE;
        }
    }
  }
}
