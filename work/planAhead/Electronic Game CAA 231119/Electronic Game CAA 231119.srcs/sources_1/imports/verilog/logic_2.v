/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module logic_2 (
    input clk,
    input rst,
    input start_button,
    input [15:0] push_button,
    input [15:0] alu,
    output reg [7:0] led,
    output reg [15:0] light,
    output reg [5:0] alufn,
    output reg [4:0] ra_addr,
    output reg [4:0] rb_addr,
    output reg [15:0] wa_data,
    output reg write,
    output reg default_values
  );
  
  
  
  localparam IDLE_state = 5'd0;
  localparam CHECKREGISTERDATA_state = 5'd1;
  localparam MULTIPLIER_state = 5'd2;
  localparam POINTSTOADD_state = 5'd3;
  localparam DELAY_state = 5'd4;
  localparam LIGHT_state = 5'd5;
  localparam S12_state = 5'd6;
  localparam S11_state = 5'd7;
  localparam S10_state = 5'd8;
  localparam S9_state = 5'd9;
  localparam S8_state = 5'd10;
  localparam S7_state = 5'd11;
  localparam S6_state = 5'd12;
  localparam S5_state = 5'd13;
  localparam S4_state = 5'd14;
  localparam S3_state = 5'd15;
  localparam S2_state = 5'd16;
  localparam S1_state = 5'd17;
  localparam S0_state = 5'd18;
  localparam FAIL_state = 5'd19;
  localparam SUCCESS_state = 5'd20;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  wire [3-1:0] M_delay_value;
  wire [16-1:0] M_delay_light;
  reg [1-1:0] M_delay_resetCount;
  delayCount_6 delay (
    .clk(clk),
    .rst(rst),
    .resetCount(M_delay_resetCount),
    .value(M_delay_value),
    .light(M_delay_light)
  );
  wire [26-1:0] M_easy_value;
  wire [16-1:0] M_easy_light;
  reg [1-1:0] M_easy_resetCount;
  easyCount_7 easy (
    .clk(clk),
    .rst(rst),
    .resetCount(M_easy_resetCount),
    .value(M_easy_value),
    .light(M_easy_light)
  );
  wire [25-1:0] M_med_value;
  wire [16-1:0] M_med_light;
  reg [1-1:0] M_med_resetCount;
  medCount_8 med (
    .clk(clk),
    .rst(rst),
    .resetCount(M_med_resetCount),
    .value(M_med_value),
    .light(M_med_light)
  );
  wire [24-1:0] M_hard_value;
  wire [16-1:0] M_hard_light;
  reg [1-1:0] M_hard_resetCount;
  hardCount_9 hard (
    .clk(clk),
    .rst(rst),
    .resetCount(M_hard_resetCount),
    .value(M_hard_value),
    .light(M_hard_light)
  );
  wire [23-1:0] M_extreme_value;
  wire [16-1:0] M_extreme_light;
  reg [1-1:0] M_extreme_resetCount;
  extremeCount_10 extreme (
    .clk(clk),
    .rst(rst),
    .resetCount(M_extreme_resetCount),
    .value(M_extreme_value),
    .light(M_extreme_light)
  );
  wire [22-1:0] M_boss_value;
  wire [16-1:0] M_boss_light;
  reg [1-1:0] M_boss_resetCount;
  bossCount_11 boss (
    .clk(clk),
    .rst(rst),
    .resetCount(M_boss_resetCount),
    .value(M_boss_value),
    .light(M_boss_light)
  );
  wire [6-1:0] M_scoreModule_alufn;
  wire [5-1:0] M_scoreModule_ra_addr;
  wire [5-1:0] M_scoreModule_rb_addr;
  wire [16-1:0] M_scoreModule_wa_data;
  wire [1-1:0] M_scoreModule_write;
  wire [1-1:0] M_scoreModule_next;
  reg [16-1:0] M_scoreModule_alu;
  score_12 scoreModule (
    .clk(clk),
    .rst(rst),
    .alu(M_scoreModule_alu),
    .alufn(M_scoreModule_alufn),
    .ra_addr(M_scoreModule_ra_addr),
    .rb_addr(M_scoreModule_rb_addr),
    .wa_data(M_scoreModule_wa_data),
    .write(M_scoreModule_write),
    .next(M_scoreModule_next)
  );
  reg [3:0] M_stage_d, M_stage_q = 1'h0;
  reg [3:0] M_length_d, M_length_q = 1'h0;
  reg [3:0] M_count_d, M_count_q = 1'h0;
  reg [22:0] M_release_d, M_release_q = 1'h0;
  reg [15:0] M_press_input_d, M_press_input_q = 1'h0;
  reg M_cmpeq_d, M_cmpeq_q = 1'h0;
  reg [15:0] M_multiplier_d, M_multiplier_q = 1'h0;
  reg M_countPoints_d, M_countPoints_q = 1'h0;
  
  reg [4:0] checkReg;
  
  always @* begin
    M_state_d = M_state_q;
    M_countPoints_d = M_countPoints_q;
    M_count_d = M_count_q;
    M_cmpeq_d = M_cmpeq_q;
    M_length_d = M_length_q;
    M_press_input_d = M_press_input_q;
    M_release_d = M_release_q;
    M_stage_d = M_stage_q;
    M_multiplier_d = M_multiplier_q;
    
    led = 8'h00;
    light = 16'h0000;
    alufn = 6'h00;
    ra_addr = 5'h1f;
    rb_addr = 5'h1f;
    wa_data = 16'h0000;
    write = 1'h0;
    default_values = 1'h0;
    M_scoreModule_alu = alu;
    M_delay_resetCount = 1'h0;
    M_easy_resetCount = 1'h0;
    M_med_resetCount = 1'h0;
    M_hard_resetCount = 1'h0;
    M_extreme_resetCount = 1'h0;
    M_boss_resetCount = 1'h0;
    checkReg = 5'h00;
    
    case (M_stage_q)
      1'h0: begin
        M_length_d = 2'h3;
        M_multiplier_d = 1'h1;
      end
      1'h1: begin
        M_length_d = 2'h3;
        M_multiplier_d = 1'h1;
      end
      2'h2: begin
        M_length_d = 3'h4;
        M_multiplier_d = 1'h1;
      end
      2'h3: begin
        M_length_d = 3'h5;
        M_multiplier_d = 1'h1;
      end
      3'h4: begin
        M_length_d = 3'h5;
        M_multiplier_d = 1'h1;
      end
      3'h5: begin
        M_length_d = 3'h5;
        M_multiplier_d = 2'h2;
      end
      3'h6: begin
        M_length_d = 3'h6;
        M_multiplier_d = 2'h2;
      end
      3'h7: begin
        M_length_d = 3'h6;
        M_multiplier_d = 2'h2;
      end
      4'h8: begin
        M_length_d = 3'h7;
        M_multiplier_d = 2'h2;
      end
      4'h9: begin
        M_length_d = 4'h8;
        M_multiplier_d = 2'h3;
      end
      4'ha: begin
        M_length_d = 4'h9;
        M_multiplier_d = 2'h3;
      end
      4'hb: begin
        M_length_d = 4'h9;
        M_multiplier_d = 2'h3;
      end
      4'hc: begin
        M_length_d = 4'ha;
        M_multiplier_d = 2'h3;
      end
      4'hd: begin
        M_length_d = 4'hb;
        M_multiplier_d = 3'h4;
      end
      4'he: begin
        M_length_d = 4'hc;
        M_multiplier_d = 3'h4;
      end
      4'hf: begin
        M_length_d = 4'hd;
        M_multiplier_d = 3'h5;
      end
    endcase
    
    case (M_state_q)
      IDLE_state: begin
        default_values = 1'h1;
        ra_addr = 5'h11;
        wa_data = 2'h3;
        write = 1'h1;
        M_count_d = 1'h0;
        M_stage_d = 1'h0;
        if (start_button) begin
          M_state_d = MULTIPLIER_state;
        end
        if (push_button[0+0-:1] && push_button[12+0-:1]) begin
          M_stage_d = 3'h5;
          M_state_d = MULTIPLIER_state;
        end
        if (push_button[0+0-:1] && push_button[13+0-:1]) begin
          M_stage_d = 4'h9;
          M_state_d = MULTIPLIER_state;
        end
        if (push_button[0+0-:1] && push_button[14+0-:1]) begin
          M_stage_d = 4'hd;
          M_state_d = MULTIPLIER_state;
        end
        if (push_button[0+0-:1] && push_button[15+0-:1]) begin
          M_stage_d = 4'hf;
          M_state_d = MULTIPLIER_state;
        end
        if (push_button[14+0-:1]) begin
          M_state_d = CHECKREGISTERDATA_state;
        end
      end
      CHECKREGISTERDATA_state: begin
        write = 1'h0;
        alufn = 6'h1a;
        ra_addr = checkReg;
        rb_addr = 5'h1f;
        wa_data = 16'h0000;
        light = alu;
        if (push_button[13+0-:1]) begin
          M_state_d = IDLE_state;
        end
      end
      MULTIPLIER_state: begin
        write = 1'h1;
        alufn = 6'h00;
        ra_addr = 5'h12;
        rb_addr = 5'h1f;
        wa_data = M_multiplier_q;
        M_state_d = POINTSTOADD_state;
      end
      POINTSTOADD_state: begin
        if (M_countPoints_q) begin
          M_countPoints_d = 1'h0;
          wa_data = alu;
          write = 1'h1;
          ra_addr = 5'h13;
          M_delay_resetCount = 1'h1;
          M_state_d = DELAY_state;
        end else begin
          write = 1'h0;
          alufn = 6'h02;
          ra_addr = 5'h11;
          rb_addr = 5'h12;
          M_countPoints_d = 1'h1;
        end
      end
      DELAY_state: begin
        light = M_delay_light;
        if (M_delay_value == 3'h7) begin
          M_count_d = M_length_q;
          M_release_d = 1'h0;
          M_easy_resetCount = 1'h1;
          M_med_resetCount = 1'h1;
          M_hard_resetCount = 1'h1;
          M_extreme_resetCount = 1'h1;
          M_boss_resetCount = 1'h1;
          M_state_d = LIGHT_state;
        end
      end
      LIGHT_state: begin
        if (M_stage_q <= 3'h4) begin
          light = M_easy_light;
          if (M_easy_light != 16'h0000 && M_easy_value == 26'h3ffffff) begin
            ra_addr = M_count_q;
            wa_data = M_easy_light;
            write = 1'h1;
            M_count_d = M_count_q - 1'h1;
          end
          if (M_count_q == 1'h0) begin
            if (M_length_q == 2'h3) begin
              M_state_d = S2_state;
            end else begin
              if (M_length_q == 3'h4) begin
                M_state_d = S3_state;
              end else begin
                if (M_length_q == 3'h5) begin
                  M_state_d = S4_state;
                end
              end
            end
          end
        end else begin
          if (M_stage_q <= 4'h8) begin
            light = M_med_light;
            if (M_med_light != 16'h0000 && M_med_value == 25'h1ffffff) begin
              ra_addr = M_count_q;
              wa_data = M_med_light;
              write = 1'h1;
              M_count_d = M_count_q - 1'h1;
            end
            if (M_count_q == 1'h0) begin
              if (M_length_q == 3'h5) begin
                M_state_d = S4_state;
              end else begin
                if (M_length_q == 3'h6) begin
                  M_state_d = S5_state;
                end else begin
                  if (M_length_q == 3'h7) begin
                    M_state_d = S6_state;
                  end
                end
              end
            end
          end else begin
            if (M_stage_q <= 4'hc) begin
              light = M_hard_light;
              if (M_hard_light != 16'h0000 && M_hard_value == 24'hffffff) begin
                ra_addr = M_count_q;
                wa_data = M_hard_light;
                write = 1'h1;
                M_count_d = M_count_q - 1'h1;
              end
              if (M_count_q == 1'h0) begin
                if (M_length_q == 4'h8) begin
                  M_state_d = S7_state;
                end else begin
                  if (M_length_q == 4'h9) begin
                    M_state_d = S8_state;
                  end else begin
                    if (M_length_q == 4'ha) begin
                      M_state_d = S9_state;
                    end
                  end
                end
              end
            end else begin
              if (M_stage_q <= 4'he) begin
                light = M_extreme_light;
                if (M_extreme_light != 16'h0000 && M_extreme_value == 23'h7fffff) begin
                  ra_addr = M_count_q;
                  wa_data = M_extreme_light;
                  write = 1'h1;
                  M_count_d = M_count_q - 1'h1;
                end
                if (M_count_q == 1'h0) begin
                  if (M_length_q == 4'hb) begin
                    M_state_d = S10_state;
                  end else begin
                    if (M_length_q == 4'hc) begin
                      M_state_d = S11_state;
                    end
                  end
                end
              end else begin
                if (M_stage_q == 4'hf) begin
                  light = M_boss_light;
                  if (M_boss_light != 16'h0000 && M_boss_value == 22'h3fffff) begin
                    ra_addr = M_count_q;
                    wa_data = M_boss_light;
                    write = 1'h1;
                    M_count_d = M_count_q - 1'h1;
                  end
                  if (M_count_q == 1'h0) begin
                    if (M_length_q == 4'hd) begin
                      M_state_d = S12_state;
                    end
                  end
                end
              end
            end
          end
        end
      end
      S12_state: begin
        light = push_button;
        rb_addr = 5'h0d;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S11_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_cmpeq_d = 1'h0;
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[2+0-:1] = 1'h1;
      end
      S11_state: begin
        light = push_button;
        rb_addr = 5'h0c;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S10_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_cmpeq_d = 1'h0;
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[3+0-:1] = 1'h1;
      end
      S10_state: begin
        light = push_button;
        rb_addr = 5'h0b;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S9_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_cmpeq_d = 1'h0;
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[4+0-:1] = 1'h1;
      end
      S9_state: begin
        light = push_button;
        rb_addr = 5'h0a;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S8_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_cmpeq_d = 1'h0;
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[5+0-:1] = 1'h1;
      end
      S8_state: begin
        light = push_button;
        rb_addr = 5'h09;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S7_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_cmpeq_d = 1'h0;
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[6+0-:1] = 1'h1;
      end
      S7_state: begin
        light = push_button;
        rb_addr = 5'h08;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S6_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_cmpeq_d = 1'h0;
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[7+0-:1] = 1'h1;
      end
      S6_state: begin
        light = push_button;
        rb_addr = 5'h07;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S5_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[1+0-:1] = 1'h1;
      end
      S5_state: begin
        light = push_button;
        rb_addr = 5'h06;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S4_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[2+0-:1] = 1'h1;
      end
      S4_state: begin
        light = push_button;
        rb_addr = 5'h05;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S3_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[3+0-:1] = 1'h1;
      end
      S3_state: begin
        light = push_button;
        rb_addr = 5'h04;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S2_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[4+0-:1] = 1'h1;
      end
      S2_state: begin
        light = push_button;
        rb_addr = 5'h03;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S1_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[5+0-:1] = 1'h1;
      end
      S1_state: begin
        light = push_button;
        rb_addr = 5'h02;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (M_cmpeq_q) begin
              M_cmpeq_d = 1'h0;
              M_release_d = 1'h0;
              M_state_d = S0_state;
            end else begin
              if (!M_cmpeq_q) begin
                M_state_d = FAIL_state;
              end
            end
          end
        end
        led[6+0-:1] = 1'h1;
      end
      S0_state: begin
        light = push_button;
        rb_addr = 5'h02;
        if (push_button != 16'h0000) begin
          M_press_input_d = push_button;
          M_release_d = M_release_q + 1'h1;
          alufn = 6'h35;
          ra_addr = 5'h0e;
          wa_data = M_press_input_q;
          write = 1'h1;
          if (alu[0+0-:1]) begin
            M_cmpeq_d = 1'h1;
          end
        end else begin
          if (push_button == 16'h0000 && M_release_q > 23'h6acfc0) begin
            if (!M_cmpeq_q) begin
              M_state_d = FAIL_state;
            end else begin
              if (M_cmpeq_q) begin
                if (M_stage_q == 4'hf) begin
                  M_cmpeq_d = 1'h0;
                  M_release_d = 1'h0;
                  M_state_d = SUCCESS_state;
                end else begin
                  M_cmpeq_d = 1'h0;
                  M_release_d = 1'h0;
                  M_delay_resetCount = 1'h1;
                  M_stage_d = M_stage_q + 1'h1;
                  M_state_d = MULTIPLIER_state;
                end
              end
            end
          end
        end
        led[7+0-:1] = 1'h1;
      end
      FAIL_state: begin
        M_count_d = 4'h0;
        M_stage_d = 4'h0;
        if (M_delay_value < 3'h4) begin
          light = 16'hff83;
        end
        if (push_button[15+0-:1]) begin
          M_state_d = IDLE_state;
        end
      end
      SUCCESS_state: begin
        M_count_d = 4'h0;
        M_stage_d = 4'h0;
        if (M_delay_value < 3'h4) begin
          light = 16'hffff;
        end
        if (push_button[15+0-:1]) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_stage_q <= 1'h0;
      M_length_q <= 1'h0;
      M_count_q <= 1'h0;
      M_release_q <= 1'h0;
      M_press_input_q <= 1'h0;
      M_cmpeq_q <= 1'h0;
      M_multiplier_q <= 1'h0;
      M_countPoints_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_stage_q <= M_stage_d;
      M_length_q <= M_length_d;
      M_count_q <= M_count_d;
      M_release_q <= M_release_d;
      M_press_input_q <= M_press_input_d;
      M_cmpeq_q <= M_cmpeq_d;
      M_multiplier_q <= M_multiplier_d;
      M_countPoints_q <= M_countPoints_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
